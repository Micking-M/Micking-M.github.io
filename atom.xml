<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Micking&#39;Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-09T07:21:45.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Micking</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode 的 C/C++ 语言环境搭建</title>
    <link href="http://example.com/2023/09/09/VSCode%20%E7%9A%84%20C%20C++%20%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/09/09/VSCode%20%E7%9A%84%20C%20C++%20%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-09-09T07:21:45.000Z</published>
    <updated>2023-09-09T07:21:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode-的-C-C-语言环境搭建"><a href="#VSCode-的-C-C-语言环境搭建" class="headerlink" title="VSCode 的 C&#x2F;C++ 语言环境搭建"></a>VSCode 的 C&#x2F;C++ 语言环境搭建</h1><blockquote><p>学习C&#x2F;C++希望能有一个通用且足够方便的编辑器，最后选择了VSCode来作为C的编辑器，最后记录一下过程以及一些遇到的问题</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本教程在win10环境下使用</p></blockquote><h3 id="基础软件下载"><a href="#基础软件下载" class="headerlink" title="基础软件下载"></a>基础软件下载</h3><p>首先需要电脑里下载好下面的软件</p><ul><li>编辑器——<a href="https://code.visualstudio.com/Download">VSCode</a></li><li>C&#x2F;C++编译器——<a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW-w64</a></li></ul><p>这里C&#x2F;C++编译器有很多选择，比如Clang等，这里我选择了MinGW-w64。</p><p> 在下载页面建议64位操作系统选择”x86_64-posix-seh”，下载后得到 “x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z” 文件，解压后得到 mingw64文件夹，copy该文件夹到安装目录(D:&#x2F;&#x2F;path&#x2F;&#x2F;to&#x2F;&#x2F;your&#x2F;&#x2F;mingw)即可，然后然后配置环境变量，添加 path &#x3D; D:&#x2F;&#x2F;path&#x2F;&#x2F;to&#x2F;&#x2F;your&#x2F;&#x2F;mingw&#x2F;&#x2F;bin</p><h2 id="VSCode-设置"><a href="#VSCode-设置" class="headerlink" title="VSCode 设置"></a>VSCode 设置</h2><p>首先下载好C&#x2F;C++扩展，这里可以直接下载<code>C/C++ Extension Pack</code>扩展 ，此扩展包包括一组用于VSCode代码中C++开发的流行扩展：</p><ul><li>C&#x2F;C++</li><li>C&#x2F;C++ Themes</li><li>CMake</li><li>CMake Tools</li></ul><p>然后主要配置三个文件：</p><blockquote><p><a href="#%E9%85%8D%E7%BD%AE-c_cpp_properties.json"><code>c_cpp_properties.json</code></a><br><a href="#%E9%85%8D%E7%BD%AE-tasks.josn"><code>tasks.josn</code></a><br><a href="#%E9%85%8D%E7%BD%AE-launch.json"><code>launch.json</code></a></p></blockquote><h3 id="配置-c-cpp-properties-json"><a href="#配置-c-cpp-properties-json" class="headerlink" title="配置 c_cpp_properties.json"></a>配置 c_cpp_properties.json</h3><p>这一步主要是用于使VSCode知道编译器的路径，以方便调用<br>首先创建一个新项目，即文件夹。<br><img src="https://raw.githubusercontent.com/Micking-M/images/master/images/yank-note-picgo-img-20230909160148.png" alt="Img"><br>然后打开全局命令面板(快捷键Ctrl + Shift + P) 按下 <strong>&gt;</strong> 搜索找到C&#x2F;C++: Edit Configurations (C&#x2F;C++: 编辑配置)<br><img src="https://raw.githubusercontent.com/Micking-M/images/master/images/yank-note-picgo-img-20230909160827.png" alt="Img"><br>然后跳转到配置界面，这里是选用UI配置，主要配置三个参数<br><img src="https://raw.githubusercontent.com/Micking-M/images/master/images/yank-note-picgo-img-20230909191036.png" alt="Img"><br>需要注意的是包含路径参数(includePath)需要在cmd中输入<code>gcc -v -E -x c++ -</code>在指令结束最后可以获得一系列路径，需要把路径加入到这个参数列表中<br><img src="https://raw.githubusercontent.com/Micking-M/images/master/images/yank-note-picgo-img-20230909173745.png" alt="Img"><br>可选择配置C标准和C++标准<br>配置完成后可以发现<code>.vscode</code>文件夹里面有<code>c_cpp_properties.json</code></p><h3 id="配置-tasks-josn"><a href="#配置-tasks-josn" class="headerlink" title="配置 tasks.josn"></a>配置 tasks.josn</h3><p>这个文件是用于编译文件的</p><p>首先新建一个后缀为<code>.cpp</code>或者<code>.c</code>的空文件<br>然后打开全局命令面板 搜索tasks 选择Tasks:Configure Default Build Task(任务：配置默认生成任务)<br>。选择 C&#x2F;C++: g++.exe build active file。若是 C，请选择 C&#x2F;C++: gcc.exe build active file<br>完成后会在 <code>.vscode</code> 文件夹下创建 <code>task.json</code> 文件并打开<br>参数基本无需配置</p><pre><code class="json">&#123;    &quot;version&quot;: &quot;2.0.0&quot;,    &quot;tasks&quot;: [        &#123;            &quot;type&quot;: &quot;cppbuild&quot;,            &quot;label&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;,            &quot;command&quot;: &quot;D:\\path\\to\\your\\mingw\\bin\\gcc.exe&quot;,            &quot;args&quot;: [                &quot;-fdiagnostics-color=always&quot;,                &quot;-g&quot;,                &quot;$&#123;file&#125;&quot;,                &quot;-o&quot;,                &quot;$&#123;fileDirname&#125;\\exe\\$&#123;fileBasenameNoExtension&#125;.exe&quot;            ],            &quot;options&quot;: &#123;                &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;            &#125;,            &quot;problemMatcher&quot;: [                &quot;$gcc&quot;            ],            &quot;group&quot;: &#123;                &quot;kind&quot;: &quot;build&quot;,                &quot;isDefault&quot;: true            &#125;,            &quot;detail&quot;: &quot;编译器: D:\\path\\to\\your\\mingw\\bin\\gcc.exe&quot;        &#125;    ]&#125;</code></pre><h3 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 launch.json</h3><p>这个文件是配置调试设置的，方便调试</p><p>最开始按照网上的方式<br><img src="https://raw.githubusercontent.com/Micking-M/images/master/images/yank-note-picgo-img-20230909170424.png" alt="Img"></p><p>启动调试后选择GDB&#x2F;LLDB调试器后创建<code>launch.json</code> 里面已包含了无需调整的参数，但是很可惜，我只生成了空的<code>launch.json</code><br>最后借鉴了网上的json参数实现的，需要修改两个参数<code>cwd</code>和<code>miDebuggerPath</code></p><pre><code class="json">&#123;    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;(gdb) Launch&quot;,//配置名称，将会在启动配置的下拉菜单中显示            &quot;type&quot;: &quot;cppdbg&quot;,//配置类型，这里只能为cppdbg            &quot;request&quot;: &quot;launch&quot;,//请求配置类型，可以为launch(启动)或attach(附加)            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\exe\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,//将要进行调试的程序的路径            &quot;args&quot;: [],//程序调试时传递给程序的命令行参数，一般设为空即可            &quot;stopAtEntry&quot;: false,//设为true时程序将暂停在程序入口处，一般设置为false            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, // //调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录            &quot;environment&quot;: [],            &quot;externalConsole&quot;: true,//调试时是否显示控制台窗口，一般设置为true显示控制台            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;miDebuggerPath&quot;: &quot;D://path/to/your/mingw/bin/gdb.exe&quot;, //miDebugger的路径，注意这里要与MinGW的路径对应            &quot;setupCommands&quot;: [                &#123;                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                &#125;            ],            &quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;             //调试会话开始前执行的任务，一般为编译程序，c++为g++,c为gcc            //任务名字最好与tasks.json的label一致        &#125;    ]&#125;</code></pre><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>1.建议大家配置成功后，将<code>.vscode</code>文件夹备份一份，以后需要的时候直接复制即可（放在存代码的文件夹里），不用再花时间进行配置了。</p><p>2.因为vscode在执行完程序后会退出，所以可以选择在<code>return 0;</code>增加一行</p><pre><code class="C/C++">system(“pause”)</code></pre>]]></content>
    
    
    <summary type="html">记录VSCode的</summary>
    
    
    
    <category term="C/C++" scheme="http://example.com/categories/C-C/"/>
    
    
    <category term="教程 C/C++ 环境搭建" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B-C-C-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
